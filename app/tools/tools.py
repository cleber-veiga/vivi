from typing import Optional
from langchain.tools import tool
from app.base.schemas import AgentState
from app.db.database import async_session
from app.services.calendar import check_availability, schedule_event
from app.services.memory import MemoryService
from app.src.chunk import ChunkRetrieve
from langchain.tools import tool
from app.db.database import async_session
from datetime import datetime, timedelta, time
import requests
from sqlalchemy import select
from app.models import Agent, OAuthToken

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTA MASTER
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
@tool
async def master_retrieve(query: str) -> str:
    """
    Ferramenta que busca em todo conhecimento existente do assistente
    Args:
        query (str): Pergunta reformulada com base na inten√ß√£o do usu√°rio.

    Returns:
        str: Texto com os conhecimentos institucionais.
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query)

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTAS DE COMPORTAMENTO
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@tool
async def comport_inicial() -> str:
    """Ferramenta que trar√° exemplos importantes de comportamento ao realizar sauda√ß√µes em inicios de conversa com novos leads
    """
    return """
‚ÄúOoi! Eu sou a Vivi. Estou aqui pra fazer valer cada segundo do seu tempo e interesse pela VIASOFT. Como posso te chamar?‚Äù
"""

@tool
async def comport_saudacao() -> str:
    """Defini√ß√µes de comportamento para Criar uma primeira impress√£o calorosa, acolhedora e personalizada, estabelecendo uma base para o rapport."""
    return """
**A√ß√µes Esperadas do LLM:**
*   **Mensagem Inicial:** Responda a um simples "Ol√°" com uma sauda√ß√£o amig√°vel
*   **Personaliza√ß√£o:** Pe√ßa o nome do usu√°rio de forma natural e use-o nas intera√ß√µes subsequentes para criar um senso de reconhecimento e proximidade.
*   **Tom de Voz:** Mantenha um tom de voz positivo, proativo e ligeiramente informal, mas sempre profissional.
*   **Empatia:** Demonstre que voc√™ est√° ali para ajudar a resolver um problema ou atender a uma necessidade espec√≠fica do usu√°rio.
*   **Concis√£o:** Mantenha a sauda√ß√£o inicial curta e direta, idealmente em uma ou duas frases.

**Exemplo de Intera√ß√£o:**
*   **Usu√°rio:** Ol√°
*   **LLM:** Ooi! Eu sou a Vivi. Estou aqui pra fazer valer cada segundo do seu tempo e interesse pela VIASOFT. Como posso te chamar?
*   **LLM** Oi! Que bom te ver por aqui üòä Sou a Vivi, especialista em Construshow, o sistema para varejo de materiais de constru√ß√£o. Me diz, como posso te chamar?
"""

@tool
async def comport_necess() -> str:
    """Defini√ß√µes de comportamento para Entender o interesse do cliente e coletar informa√ß√µes b√°sicas para qualifica√ß√£o, fazendo o usu√°rio sentir-se ouvido e compreendido."""
    return """
**A√ß√µes Esperadas do LLM:**
*   **Perguntas Abertas e Contextuais:** Fa√ßa perguntas que incentivem o usu√°rio a expressar suas necessidades em suas pr√≥prias palavras (ex: "O que te trouxe at√© aqui hoje?", "Qual o principal desafio que voc√™ enfrenta?").
*   **Valida√ß√£o e Resumo:** Ap√≥s a resposta do usu√°rio, valide o entendimento (ex: "Entendi, ent√£o voc√™ est√° buscando otimizar X...") e resuma brevemente para mostrar que voc√™ processou a informa√ß√£o. **Mantenha o resumo em uma √∫nica frase.**
*   **Oferecer Op√ß√µes (se aplic√°vel):** Se a resposta for muito ampla, ofere√ßa op√ß√µes de t√≥picos de interesse para guiar a conversa (ex: "Voc√™ est√° buscando A, B ou C?").
*   **Linguagem Positiva:** Use frases como "Que √≥timo!", "Perfeito!" para refor√ßar a intera√ß√£o positiva.
*   **Concis√£o:** Formule as perguntas de forma direta, sem rodeios.
*	**Conex√£o:** Sempre uso o nome do lead com frequ√™ncia para conex√£o emocial.
*	**Condu√ß√£o:** Conduza a conversa usando SPIN Selling (Situa√ß√£o-Problema-Implica√ß√£o-Necessidade). Identifique no m√≠nimo: nome, empresa, cargo, setor, desafio principal e, quando houver rapport, o CNPJ.

**Exemplo de Intera√ß√£o:**
*   **LLM:** Prazer, Jo√£o! Para que eu possa te direcionar para a informa√ß√£o mais relevante, voc√™ poderia me dizer o que te trouxe at√© aqui hoje? Voc√™ est√° buscando algum produto, ou tem alguma outra necessidade espec√≠fica?
*   **Usu√°rio:** Estou procurando algo para melhorar o controle da minha empresa.
*   **LLM:** Entendi, Jo√£o! A otimiza√ß√£o do controle das empresas √© uma das nossas especialidades. Para que eu possa te apresentar a solu√ß√£o ideal, voc√™ poderia me dizer qual o ramo da sua empresa atualmente?

**Importante:**
*	Sempre analise o segmento da empresa, para garantir que ela esteja dentro do escopo esperado, para saber melhor sobre o escopo usa a ferramenta `info_escopo_esperado`.
"""

@tool
async def comport_solucoes() -> str:
    """Defini√ß√µes de comportamento para Oferecer valor ao cliente com base nas suas necessidades identificadas, demonstrando que a Vivi √© √∫til e capaz de ajudar."""
    return """
**A√ß√µes Esperadas do LLM:**
*   **Relev√¢ncia:** Apresente produtos/servi√ßos que sejam diretamente relevantes √†s necessidades expressas pelo usu√°rio.
*   **Benef√≠cios:** Foque nos benef√≠cios para o usu√°rio, n√£o apenas nas caracter√≠sticas do produto.
*   **Linguagem Clara e Convincente:** Use uma linguagem que seja f√°cil de entender e que motive o usu√°rio a dar o pr√≥ximo passo.
*   **Transpar√™ncia:** Se for o caso, explique por que aquela solu√ß√£o √© a mais indicada para ele.
*   **Concis√£o:** Apresente as solu√ß√µes em frases curtas e impactantes. Utilize bullet points ou listas numeradas se houver mais de um item, para facilitar a leitura em dispositivos m√≥veis.
"""

@tool
async def comport_qualifica() -> str:
    """Defini√ß√µes de comportamento para Refinar a qualifica√ß√£o do lead, diferenciando curiosos de potenciais clientes, mantendo a confian√ßa e o rapport"""
    return"""
**A√ß√µes Esperadas do LLM:**
*   **Perguntas Estrat√©gicas:** Fa√ßa perguntas mais espec√≠ficas sobre quantidade de colaboradores, prazo esperado de implanta√ß√£o, desafios atuais, etc. (Ex: "Para que eu possa te ajudar da melhor forma, preciso entender um pouco mais sobre a sua necessidade. Voc√™ j√° tem um or√ßamento definido para essa solu√ß√£o?").
*   **Justificativa das Perguntas:** Sempre que poss√≠vel, justifique o porqu√™ da pergunta (ex: "Para que eu possa te apresentar a solu√ß√£o mais adequada..."). **Mantenha a justificativa breve.**
*   **An√°lise de Respostas:** Avalie o engajamento, a especificidade das respostas e a disposi√ß√£o do usu√°rio em fornecer informa√ß√µes para determinar se √© um curioso ou um lead qualificado.
*   **Adapta√ß√£o:** Se o usu√°rio parecer um curioso, redirecione-o suavemente para conte√∫do informativo (Site, FAQ) sem "descart√°-lo" abruptamente. Se for um lead, prepare o terreno para o CTA.
*   **Concis√£o:** As perguntas devem ser diretas e as op√ß√µes de resposta claras e curtas.
"""

@tool
async def comport_acao() -> str:
    """Defini√ß√µes de comportamento para Direcionar o lead para o pr√≥ximo passo no funil de vendas de forma clara e convidativa."""
    return """
**A√ß√µes Esperadas do LLM:**
*   **CTA Claro e √önico:** Apresente uma √∫nica e clara chamada para a√ß√£o (agendar reuni√£o, solicitar or√ßamento, baixar material).
*   **Benef√≠cio do CTA:** Reitere o benef√≠cio de realizar a a√ß√£o (ex: "Agende uma demonstra√ß√£o para ver como podemos resolver seus desafios!"). **Mantenha esta frase curta e impactante.**
*   **Op√ß√µes de Sa√≠da:** Ofere√ßa uma alternativa caso o usu√°rio n√£o queira o CTA principal (ex: "Se preferir, posso te enviar mais informa√ß√µes por e-mail.").
*   **Concis√£o:** O CTA deve ser direto e as op√ß√µes de resposta curtas.

"""

@tool
async def comport_encerra() -> str:
    """Defini√ß√µes de comportamento para Finalizar a conversa de forma profissional, agradecendo e deixando as portas abertas para futuras intera√ß√µes, refor√ßando o rapport"""
    return """
**A√ß√µes Esperadas do LLM:**
*   **Agradecimento:** Agrade√ßa o tempo e a intera√ß√£o do usu√°rio.
*   **Resumo (se aplic√°vel):** Se houver um pr√≥ximo passo definido, resuma-o brevemente. **Uma frase √© suficiente.**
*   **Disponibilidade:** Deixe claro que a Vivi est√° dispon√≠vel para futuras d√∫vidas.
*   **Tom Amig√°vel:** Mantenha o tom de voz positivo e prestativo.
*   **Concis√£o:** A mensagem de encerramento deve ser breve e cordial.
"""

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTAS DE INFORMA√á√ÉO
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@tool
async def info_escopo() -> str:
    """Ferramenta que retorna informa√ß√µes do escopo esperado para clientes que forem usar o Construshow"""
    return """
Atende ‚Äì varejo de materiais de constru√ß√£o, home centers, showrooms; PDV omnichannel; controle de estoque por quantidade/lote/tonalidade; reservas por or√ßamento; entregas futuras por fase de obra; sugest√µes autom√°ticas de produtos agregados; pain√©is de mix, margem e ticket m√©dio; app vendedor; bloqueios de venda por saldo ou lote incompat√≠vel.
N√£o atende ‚Äì produ√ß√£o industrial, MRP, gest√£o de frota pr√≥pria, contabilidade; controle de n√∫mero de s√©rie ou grade moda; roteiriza√ß√£o de caminh√µes; manufatura de concreto; BI externo n√£o via Analytics.
Cite s√≥ o que est√° listado; pedidos fora do escopo ‚Üí oferecer checar com consultor. N√£o criar fun√ß√µes novas.
"""

@tool
async def info_criterios_cta(query: str) -> str:
    """Crit√©rios m√≠nimos para direcionar o lead a uma demonstra√ß√£o ou agendamento"""
    return """
** Crit√©rios m√≠nimos para a chamada:**
-	Nome, CNPJ, Raz√£o Social e Fantasia;
- 	Cidade e UF;
- 	Email para envio do invite;
-	Validar o ERP atual e quantidade de usu√°rios simult√¢neos;
-	Compreender os principais desafios e dores;
-	Explorar as implica√ß√µes dessas dores;
- 	Posicionar a Viasoft com provas sociais, argumentos estrat√©gicos e diferenciais reais;
-	Confirmar que fez sentido para o lead conhecer mais.
**Essas informa√ß√µes estar√£o presentes na sess√£o `Par√¢metros Atuais`**
"""

@tool
async def info_historia(query: str) -> str:
    """
    Ferramenta que retorna informa√ß√µes institucionais da Viasoft, como hist√≥ria, miss√£o e valores.
    Use sempre que o usu√°rio solicitar quem √© a empresa ou informa√ß√µes culturais da organiza√ß√£o.

    Args:
        query (str): Pergunta reformulada com base na inten√ß√£o do usu√°rio.

    Returns:
        str: Texto com os conhecimentos institucionais.
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query, document_name="historia_missao_valores")

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)


@tool
async def info_estrutura(query: str) -> str:
    """
    Ferramenta que retorna informa√ß√µes da Estrutura organizacional da Viasoft, como departamentos, produtos, parcerias e diferenciais estrat√©gicos.
    Use sempre que o usu√°rio solicitar esse tipo de informa√ß√£o

    Args:
        query (str): Pergunta reformulada com base na inten√ß√£o apontada pelo usu√°rio.

    Returns:
        str: Texto com os conhecimentos organizacionais.
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query, document_name="estrutura_organizacional")

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)

@tool
async def info_politicas(query: str) -> str:
    """
    Consulta o conte√∫do das Pol√≠ticas e Procedimentos Internos da Viasoft com base em perguntas espec√≠ficas.

    Args:
        query (str): Pergunta refinada com base na inten√ß√£o do usu√°rio, usada para buscar informa√ß√µes relevantes.

    Returns:
        str: Texto com os conhecimentos extra√≠dos do documento oficial de Pol√≠ticas e Procedimentos da Viasoft.
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query, document_name="politicas_procedimentos")

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)

@tool
async def info_produto_funcion(query: str) -> str:
    """
    Consulta o conte√∫do das principais funcionalidades do sistema Construshow

    Args:
        query (str): Pergunta refinada com base na inten√ß√£o do usu√°rio, usada para buscar informa√ß√µes relevantes.

    Returns:
        str: Texto com os conhecimentos extra√≠dos do documento oficial de Informa√ß√µes de Funcionalidade do Produto
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query, document_name="produto_funcion")

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)


#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTAS DE EXEMPLOS
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@tool
async def exemp_objecoes(query: str) -> str:
    """
    Ferramenta que retorna exemplos para superar obje√ß√µes do cliente
    Use sempre que o usu√°rio tiver obje√ß√£o sobre algum tema

    Args:
        query (str): Pergunta reformulada com base na inten√ß√£o apontada pelo usu√°rio.

    Returns:
        str: Texto com os conhecimentos das Pol√≠ticas e Procedimentos da Viasoft
    """
    async with async_session() as session:
        chunker = ChunkRetrieve(session=session)
        chunks = await chunker.retrieve(query=query, document_name="superar_objecoes")

    if not chunks:
        return "Desculpe, n√£o encontrei informa√ß√µes no momento"

    parts = []
    for c in chunks:
        header = f"### {c.section_title} ‚Äî {c.chunk_position} ‚Äî {c.token_count} tokens"
        parts.append(f"{header}\n\n{c.content}")
    return "\n\n---\n\n".join(parts)

@tool
async def exemp_cases() -> str:
    """Exemplo de cases de uso do Construshow"""
    return """
##VIVI_Case_construshow
Cite **somente** os 6 cases oficiais abaixo; n√£o invente dados:

‚Ä¢ **Espa√ßo Smart (PR)** ‚Äì 4 ‚Üí 45 lojas; padr√µes + BI; roteirizador e app entregas.  
‚Ä¢ **Jacar√© Home Center (MA)** ‚Äì 3 ‚Üí 10 lojas; estoque e compras otimizados; ERP + App Entregas + ConstruHelper.  
‚Ä¢ **Zona Nova ‚Äì Redemac (RS)** ‚Äì rastreabilidade lote/tonalidade; eliminou reentregas; refer√™ncia log√≠stica.  
‚Ä¢ **Lojas Cacique (SP)** ‚Äì migrou do CISS; multiunidade + IA de alertas; processos automatizados fim-a-fim.  
‚Ä¢ **Schirmann Home Center (RS)** ‚Äì comandos √∫nicos PDV-BI-financeiro; Power BI + ORION em tempo real.  
‚Ä¢ **Grupo GMAD / PRO / SIM** ‚Äì mais de 20 lojas; homologado como alternativa ao SAP em grandes contas.

**Uso recomendado**  
Problema ‚Üí Solu√ß√£o Construshow ‚Üí Resultado curto. Conclua: ‚ÄúQue impacto teria algo assim na sua rede?‚Äù  

**Proibi√ß√µes**  
‚úò Alterar n√∫meros ou prazos.  
‚úò Criar hist√≥rias novas ou usar ‚Äúaprox.‚Äù para mascarar dados ausentes.
"""

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTAS DE CAPTURAS
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@tool
async def capture_nome(phone: str, name: str) -> str:
    """
    Captura o nome do cliente e atualiza no banco de dados.
    Deve ser chamada sempre que o cliente passar seu nome na conversa.
    
    Args:
        phone (str): n√∫mero do telefone do lead `phone lead`
        name (str): nome do cliente capturado
    """
    from app.db.database import async_session  # ajuste ao seu projeto
    async with async_session() as session:
        await MemoryService.upsert_memory(
            session=session,
            phone=phone,
            memory={},  # mant√©m a mem√≥ria textual como est√°
            name=name
        )
    return {"name": name}

@tool
async def capture_email(phone: str, email: str) -> str:
    """
    Captura o email do cliente e atualiza no banco de dados.
    Deve ser chamada sempre que o cliente passar seu email na conversa.
    
    Args:
        phone (str): n√∫mero do telefone do lead `phone lead`
        email (str): email do cliente capturado
    """
    from app.db.database import async_session  # ajuste ao seu projeto
    async with async_session() as session:
        await MemoryService.upsert_memory(
            session=session,
            phone=phone,
            memory={},  # mant√©m a mem√≥ria textual como est√°
            email=email
        )
    return {"email": email}

@tool
async def capture_address(phone: str, address: str) -> str:
    """
    Captura o endere√ßo do cliente e atualiza no banco de dados.
    Deve ser chamada sempre que o cliente passar seu endere√ßo na conversa.
    
    Args:
        phone (str): n√∫mero do telefone do lead `phone lead`
        address (str): endere√ßo do cliente capturado
    """
    from app.db.database import async_session  # ajuste ao seu projeto
    async with async_session() as session:
        await MemoryService.upsert_memory(
            session=session,
            phone=phone,
            memory={},  # mant√©m a mem√≥ria textual como est√°
            address=address
        )
    return {"address": address}

@tool
async def capture_cnpj(phone: str, cnpj: str) -> str:
    """
    Captura o CNPJ do cliente e atualiza no banco de dados.
    Deve ser chamada sempre que o cliente passar seu CNPJ na conversa.
    
    Args:
        phone (str): n√∫mero do telefone do lead `phone lead`
        cnpj (str): CNPJ do cliente capturado
    """
    from app.db.database import async_session  # ajuste ao seu projeto
    async with async_session() as session:
        await MemoryService.upsert_memory(
            session=session,
            phone=phone,
            memory={},  # mant√©m a mem√≥ria textual como est√°
            cnpj=cnpj
        )
    return {"cnpj": cnpj}

@tool
async def capture_corporate_reason(phone: str, corporate_reason: str) -> str:
    """
    Captura a raz√£o social ou nome da empresa do cliente e atualiza no banco de dados.
    Deve ser chamada sempre que o cliente passar sua raz√£o social ou nome da empresa na conversa.
    
    Args:
        phone (str): n√∫mero do telefone do lead `phone lead`
        corporate_reason (str): raz√£o social ou nome da empresa do cliente capturado
    """
    from app.db.database import async_session  # ajuste ao seu projeto
    async with async_session() as session:
        await MemoryService.upsert_memory(
            session=session,
            phone=phone,
            memory={},  # mant√©m a mem√≥ria textual como est√°
            corporate_reason=corporate_reason
        )
    return {"corporate_reason": corporate_reason}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#  FERRAMENTAS EXTERNAS
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@tool
async def serv_agenda_disp(data: Optional[str] = None, hora: Optional[str] = None) -> list:
    """
    Consulta os hor√°rios dispon√≠veis do agente nos pr√≥ximos 10 dias (exceto s√°bados e domingos),
    durante o hor√°rio comercial: das 08:00 √†s 12:00 e das 13:30 √†s 18:00.

    Se o cliente fornecer uma data e hora espec√≠ficas, ser√° feita a verifica√ß√£o.
    Se estiver ocupado, ser√£o sugeridos hor√°rios alternativos.
    Se nada for informado, retorna todos os hor√°rios dispon√≠veis nos pr√≥ximos 10 dias.

    Args:
        data (str, opcional): Data desejada no formato YYYY-MM-DD
        hora (str, opcional): Hora desejada no formato HH:MM

    Returns:
        Lista de hor√°rios dispon√≠veis ou sugest√£o alternativa
    """
    agent_id = 1  # fixo por enquanto
    async with async_session() as session:
        agora = datetime.now()
        horarios_disponiveis = []

        # Caso data e hora sejam fornecidos, verificar diretamente
        if data and hora:
            disponibilidade = await check_availability(
                session=session,
                agent_id=agent_id,
                data=data,
                hora=hora,
                duracao_minutos=30
            )
            if disponibilidade["disponivel"]:
                return [f"{data} {hora} dispon√≠vel para agendamento."]
            else:
                # Sugerir pr√≥ximos hor√°rios dispon√≠veis
                sugestoes = []
                for dias in range(1, 11):
                    data_alvo = agora + timedelta(days=dias)
                    if data_alvo.weekday() >= 5:
                        continue

                    blocos = [
                        (time(8, 0), time(12, 0)),
                        (time(13, 30), time(18, 0)),
                    ]

                    for inicio, fim in blocos:
                        horario_atual = datetime.combine(data_alvo.date(), inicio)
                        while horario_atual.time() < fim:
                            hora_alt = horario_atual.strftime("%H:%M")
                            data_alt = horario_atual.strftime("%Y-%m-%d")

                            disponibilidade_alt = await check_availability(
                                session=session,
                                agent_id=agent_id,
                                data=data_alt,
                                hora=hora_alt,
                                duracao_minutos=30
                            )

                            if disponibilidade_alt["disponivel"]:
                                sugestoes.append(f"{data_alt} {hora_alt}")
                            if len(sugestoes) >= 5:
                                break
                            horario_atual += timedelta(minutes=30)

                    if len(sugestoes) >= 5:
                        break

                return [f"Hor√°rio {data} {hora} indispon√≠vel. Sugest√µes:"] + sugestoes

        # Caso n√£o tenha data/hora: listar todos os dispon√≠veis nos pr√≥ximos 10 dias
        for dias in range(1, 11):
            data_alvo = agora + timedelta(days=dias)
            if data_alvo.weekday() >= 5:
                continue

            blocos = [
                (time(8, 0), time(12, 0)),
                (time(13, 30), time(18, 0)),
            ]

            for inicio, fim in blocos:
                horario_atual = datetime.combine(data_alvo.date(), inicio)
                while horario_atual.time() < fim:
                    hora_formatada = horario_atual.strftime("%H:%M")
                    data_formatada = horario_atual.strftime("%Y-%m-%d")

                    disponibilidade = await check_availability(
                        session=session,
                        agent_id=agent_id,
                        data=data_formatada,
                        hora=hora_formatada,
                        duracao_minutos=30
                    )

                    if disponibilidade["disponivel"]:
                        horarios_disponiveis.append(f"{data_formatada} {hora_formatada}")

                    horario_atual += timedelta(minutes=30)

        return horarios_disponiveis or ["Nenhum hor√°rio dispon√≠vel nos pr√≥ximos 10 dias."]
    
@tool
async def serv_agenda(data: str, hora: str, cliente: str, assunto: str, email_cliente: str) -> dict:
    """
    Agenda um hor√°rio no Google Calendar.
    A IA deve garantir que todos os campos sejam fornecidos: data, hora, nome do cliente, assunto e e-mail do cliente.
    Sempre consulte a disponibilidade antes de agendar.
    O email deve ser captado do Estado Atual e caso n√£o esteja l√° solicite ao usu√°rio. NUNCA INVENTE EMAIL!

    Args:
        data (str): Data no formato YYYY-MM-DD
        hora (str): Hora no formato HH:MM (24h)
        cliente (str): Nome do cliente
        assunto (str): Assunto do compromisso
        email_cliente (str): E-mail do cliente para ser adicionado como convidado

    Returns:
        Mensagem de confirma√ß√£o do agendamento.
    """
    campos_faltando = []

    if not data:
        campos_faltando.append("data")
    if not hora:
        campos_faltando.append("hora")
    if not cliente:
        campos_faltando.append("cliente")
    if not assunto:
        campos_faltando.append("assunto")
    if not email_cliente:
        campos_faltando.append("email_cliente")

    if campos_faltando:
        campos = ", ".join(campos_faltando)
        return {
            "erro": f"Par√¢metro(s) faltando: {campos}. Me informe ou solicite ao usu√°rio caso n√£o tenha."
        }

    agent_id = 1
    duracao_minutos = 60  # dura√ß√£o padr√£o de 1 hora

    async with async_session() as session:
        # Verifica se o hor√°rio est√° dispon√≠vel
        disponibilidade = await check_availability(
            session=session,
            agent_id=agent_id,
            data=data,
            hora=hora,
            duracao_minutos=duracao_minutos
        )

        if not disponibilidade["disponivel"]:
            return {
                "erro": "Hor√°rio indispon√≠vel. Consulte os hor√°rios dispon√≠veis antes de tentar agendar."
            }

        try:
            resultado = await schedule_event(
                session=session,
                agent_id=agent_id,
                data=data,
                hora=hora,
                cliente=cliente,
                assunto=assunto,
                duracao_minutos=duracao_minutos,
                email_convidado=email_cliente  # novo argumento
            )
            return resultado
        except Exception as e:
            return {"erro": f"Erro ao agendar: {str(e)}"}